# -*- coding: utf-8 -*-
"""230125.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nYxxLMi2OD2ZGaY6dXCF8XQ0tEr3hWfB

###2023-01-25 python advanced project camp 1st class
"""

import numpy as np
mid_scores = np.array([10, 20, 30])
final_scores = np.array([60, 70, 80])
total = mid_scores + final_scores
print("시험 성적의 합계 :", total) # 각 요소별 합계가 나타난다.
print("시험 성적의 평균 :", total/2) # 모든 요소를 2로 나눈다.

## numpy를 사용하지 않고 그래프 출력
import matplotlib.pyplot as plt
t = []
p2 = []
p3 = []
for i in range(0, 50, 2): # 0~50까지 2씩 띄워서
  t.append(i / 10)
  p2.append((i / 10) ** 2)
  p3.append((i / 10) ** 3)
# plt.plot(t, t, 'r--', t, p2, 'bs', t, p3, 'g^') # t : x, t : y. r-- : red dotted line, t : x, p2 : y, bs : blue squer, t : x, p3 : y, g^ : green traiangle
plt.show() # 그래프 보여주셈

## numpy를 사용하고 그래프 출력
import matplotlib.pyplot as plt
import numpy as np
t = np.arange(0., 5., 0.2)
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()

## 제곱근 출력하기
print(np.sqrt(9))

## 파이와 삼각함수 활용하기
print(np.pi)
print(np.sin(30))
print(np.cos(np.pi))

## random 함수 활용

# a = np.random.rand(5)
# print(a)
# print(type(a)|)

print(np.random.choice(10, 6, replace=False))  # 중복 제거
print(np.random.choice(6, 10, p=[0.1, 0.2, 0.3, 0.2, 0.1, 0.1])) # 확률 정하기

## 히스토그램 그리기

dice = np.random.choice(6, 10) # 0~6까지의 데이터 10개를 랜덤으로

plt.hist(dice, bins=6) # 6칸씩 나눠서 그리기 (가로폭 지정)
plt.show()

dice = np.random.choice(6, 1000000, p=[0.1, 0.2, 0.3, 0.2, 0.1, 0.1]) # 확률 그대로 그래프 출력이 됨
plt.hist(dice, bins=6) # 0, 1, 2, 3, 4, 5 중 랜덤으로 추출한 숫자를 히스토그램으로 표현
plt.show()

## np.array

# a = np.array([1, 2, 3, 4])
# print(a)

a = np.array([1, 2, 3, 4])
print(a[1], a[-1]) # a의 1번 인덱스 값 (2), -1번 인덱스 값 출력 (맨 마지막 값, 4)
print(a[1:]) # 1부터 끝까지 2, 3, 4

##np.zeros

a = np.zeros(10) # 0으로 이루어진 크기가 10인 배열 생성
print(a)

b = np.zeros(10) + 5 # 5로 이루어진 크기가 10인 배열 생성 (데이터를 모아놓고 한번에 계산을 할 수 있음)
print(b)

## arange(), linspace()

print(np.arange(3)) # arange() 함수에 1개 값 입력
print(np.arange(3, 7)) # arange() 함수에 2개 값 입력
print(np.arange(3, 7, 2)) # arange() 함수에 3개 값 입력
print("\n")

a = np.arange(1, 2, 0.1) # 1이상 2미만 구간에서 0.1 간격으로 실수 생성 (2포함 x)
b = np.linspace(1, 2, 11) # 1부터 2까지 11개 구간으로 나눈 실수 생성 (칸수는 모르겠고 11개만 주셈, 알아서 잘 쪼개봐.) (2포함)
print(a)
print(b)
print("\n")

c = np.arange(-np.pi, np.pi, np.pi/10) # 파이 포함x
d = np.linspace(-np.pi, np.pi, 20) # 파이 포함 linspace를 더 많이 사용한다
print(c)
print(d)
print("\n")

e = np.linspace(1, 2, 11)
print(np.sqrt(e)) # e값의 제곱근을 출력함
print("\n")

f = np.arange(-np.pi, np.pi, np.pi/100) # 200개를 만들겠다는 뜻
plt.plot(f, np.sin(f), color = 'red')
plt.plot(f, np.cos(f), color = 'blue')
plt.plot(f+np.pi/2, np.sin(f), color = 'yellow')
plt.show()

# Mask 적용하기, Mask : 1. 조건(Mask)을 하나 걸고 -> 2. 조건 만족 여부가 나오도록 함 (True, False) -> 3. True 값들만 나올 수 있도록 함
a = np.arange(-5, 5) # -5부터 5직전까지의 데이터 출력
print(a)
print(a<0) # 1, 2
print(a[a<0]) # 3
print("\n")

mask1 = abs(a) > 3 # abs() : 절대값
print(a[mask1])

mask1 = abs(a) > 3
mask2 = abs(a) % 2 == 0
print(a[mask1+mask2]) # 둘 중 하나의 조건이라도 참일 경우 절대값이 3보다 크거나 짝수인 것들만 나오게 된다 or
print(a[mask1*mask2]) # 두 가지 조건이 모두 참일 경우 절대값이 3보다 크고 짝수인 것들만 나오게 된다 and

x = np.random.randint(-100, 100, 1000) # 1000개의 랜덤 값 추출, randint : 랜덤 값을 뽑아 내는데, 정수값만 추출 하겠다.
y = np.random.randint(-100, 100, 1000) # 1000개의 랜덤 값 추출
# size = np.random.rand(100) * 100
mask1 = abs(x) > 50 # x에 저장된 값 중 절대값이 50보다 큰 값 걸러냄
mask2 = abs(y) > 50 # y에 저장된 값 중 절대값이 50보다 큰 값 걸러냄
x = x[mask1+mask2] # mask1과 mask2 중 하나라도 만족하는 값 저장
y = y[mask1+mask2] # mask1과 mask2 중 하나라도 만족하는 값 저장
size = np.random.rand(len(x)) * 100
plt.scatter(x, y, s=size, c=x, cmap='jet', alpha=0.7) # scatter : 흩뿌린다. (산점도 구하기), alpha : 투명도, 0~1까지의 숫자를 낮출수록 투명해진다.
plt.colorbar() # colorbar : scatter를 썼을 때 색상이 의미하는 바는 뭐냐
plt.show()

# 가운데에 데이터가 안 나오는 이유 : Mask를 씌웠기 때문이다.
# size가 x의 개수를 기반으로 하는 것이기 때문에 mask1위에 적히면 안된다.

"""ex) 우리 동네 인구 분포 구조와 비슷한 동네
알고리즘 설계
1. 데이터 읽어오기
2. 궁금한 지역의 이름을 입력받음
3. 궁금한 지역의 인구 구조 저장
4. 궁금한 지역의 인구 구조와 가장 비슷한 인구 구조를 가진 지역 찾기
5. 가장 비슷한 곳의 인구 구조와 궁금한 지역의 인구 구조를 시각화함
"""

import csv
f = open('age.csv', encoding='CP949')
data = csv.reader(f)
next(data)
name = input("인구 구조가 알고 싶은 지역의 이름 (읍면도 단위)을 입력해주세요 :")
for row in data:
  if name in row[0]:
    home = np.array(row[3:], dtype=int)
print(home)

